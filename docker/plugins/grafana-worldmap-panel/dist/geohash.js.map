{"version":3,"sources":["../src/geohash.js"],"names":[],"mappings":";;;AAAe,WAAS,aAAT,CAAuB,OAAvB,EAAgC;AAC7C,QAAI,CAAC,OAAD,IAAY,QAAQ,MAAR,KAAmB,CAAnC,EAAsC,MAAM,IAAI,KAAJ,CAAU,uBAAV,CAAN;;AAEtC,QAAM,OAAO,CAAC,EAAD,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,CAAb;AACA,QAAM,SAAS,kCAAf;AACA,QAAI,SAAS,CAAb;AACA,QAAM,MAAM,EAAZ;AACA,QAAM,MAAM,EAAZ;AACA,QAAI,CAAJ,IAAS,CAAC,IAAV;AACA,QAAI,CAAJ,IAAS,IAAT;AACA,QAAI,CAAJ,IAAS,CAAC,KAAV;AACA,QAAI,CAAJ,IAAS,KAAT;AACA,QAAI,SAAS,IAAb;AACA,QAAI,SAAS,KAAb;AACA,QAAI,sBAAJ;;AAEA,YAAQ,KAAR,CAAc,EAAd,EAAkB,OAAlB,CAA0B,UAAC,IAAD,EAAU;AAClC,sBAAgB,OAAO,OAAP,CAAe,IAAf,CAAhB;AACA,WAAK,OAAL,CAAa,UAAC,IAAD,EAAU;AACrB,YAAI,MAAJ,EAAY;AACV,oBAAU,CAAV;AACA,yBAAe,GAAf,EAAoB,aAApB,EAAmC,IAAnC;AACD,SAHD,MAGO;AACL,oBAAU,CAAV;AACA,yBAAe,GAAf,EAAoB,aAApB,EAAmC,IAAnC;AACD;AACD,iBAAS,CAAC,MAAV;AACD,OATD;AAUD,KAZD;AAaA,QAAM,YAAY,CAAC,IAAI,CAAJ,IAAS,IAAI,CAAJ,CAAV,IAAoB,CAAtC;AACA,QAAM,YAAY,CAAC,IAAI,CAAJ,IAAS,IAAI,CAAJ,CAAV,IAAoB,CAAtC;;AAEA,WAAO,EAAE,UAAU,SAAZ,EAAuB,WAAW,SAAlC,EAAP;AACD;;qBAjCuB,a;;AAmCxB,WAAS,cAAT,CAAwB,QAAxB,EAAkC,aAAlC,EAAiD,IAAjD,EAAuD;AACrD,QAAI,gBAAgB,IAApB,EAA0B;AACxB,eAAS,CAAT,IAAc,CAAC,SAAS,CAAT,IAAc,SAAS,CAAT,CAAf,IAA8B,CAA5C;AACD,KAFD,MAEO;AACL,eAAS,CAAT,IAAc,CAAC,SAAS,CAAT,IAAc,SAAS,CAAT,CAAf,IAA8B,CAA5C;AACD;AACF","file":"geohash.js","sourcesContent":["export default function decodeGeoHash(geohash) {\n  if (!geohash || geohash.length === 0) throw new Error('Missing geohash value');\n\n  const BITS = [16, 8, 4, 2, 1];\n  const BASE32 = '0123456789bcdefghjkmnpqrstuvwxyz';\n  let isEven = 1;\n  const lat = [];\n  const lon = [];\n  lat[0] = -90.0;\n  lat[1] = 90.0;\n  lon[0] = -180.0;\n  lon[1] = 180.0;\n  let latErr = 90.0;\n  let lonErr = 180.0;\n  let base32Decoded;\n\n  geohash.split('').forEach((item) => {\n    base32Decoded = BASE32.indexOf(item);\n    BITS.forEach((mask) => {\n      if (isEven) {\n        lonErr /= 2;\n        refineInterval(lon, base32Decoded, mask);\n      } else {\n        latErr /= 2;\n        refineInterval(lat, base32Decoded, mask);\n      }\n      isEven = !isEven;\n    });\n  });\n  const latCenter = (lat[0] + lat[1]) / 2;\n  const lonCenter = (lon[0] + lon[1]) / 2;\n\n  return { latitude: latCenter, longitude: lonCenter};\n}\n\nfunction refineInterval(interval, base32Decoded, mask) {\n  if (base32Decoded & mask) {\n    interval[0] = (interval[0] + interval[1]) / 2;\n  } else {\n    interval[1] = (interval[0] + interval[1]) / 2;\n  }\n}\n"]}